题目：姥姥说是是=2004年浙江大学计算机专业考研复试真题，要求略高，选做。其实也不难，是本次课最后讲到的算法的改造，挑战一下吧~

01-复杂度2 Maximum Subsequence Sum（25 分）
Given a sequence of K integers { N1, N2, ..., NK }. A continuous subsequence is defined to be { Ni, Ni+1, ..., Nj  } where 1≤i≤j≤K. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.

Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.

Input Specification:

Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer K (≤10000). The second line contains K numbers, separated by a space.

Output Specification:

For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case). If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.

Sample Input:

10
-10 1 2 3 4 -5 -23 3 7 -21
Sample Output:

10 1 4

思考:刚开始思考的时候还是依据上面的算法思路想问题，思路一直在用一个for循环怎么实现上？
后来想不出用一个for循环解决题目问题的答案，用了套了一个循环解决问题。

代码：
# include <cstdio>
# define maxn  100010
int main(){
  int n;
  scanf("%d",&n);
  int a[maxn],stride[5];
  for(int i=0;i<n;i++){
    scanf("%d",&a[i]);
  }
  int i,ThisSum=0,MaxSum=-1;
  int first,last;
  int flag=0;//负数的个数 
  for(int k=0;k<n;k++){
  	if(a[k]<0){
  		flag++;
  	}
  }
  if(flag==n)printf("%d %d %d\n",0,a[0],a[n-1]);
  else{
  	for(i=0;i<n;i++){
  		ThisSum = 0;
		for(int j=i;j<n;j++){
			ThisSum+=a[j];
			if(ThisSum>MaxSum){
				MaxSum= ThisSum; 
				stride[0]=a[i];
				stride[1]=a[j];	
			}
		}    
   	 }
   	printf("%d %d %d\n",MaxSum,stride[0],stride[1]);
  }  
  return 0;
}
